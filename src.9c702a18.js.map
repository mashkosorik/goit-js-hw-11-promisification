{"version":3,"sources":["index.js"],"names":["delay","ms","promise","Promise","resolve","reject","setTimeout","logger","time","console","log","then","catch","err","users","name","active","toggleUserState","allUsers","userName","res","rej","updatedUsers","map","user","logger1","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","id","logSuccess","logError","warn","amount"],"mappings":";AAEA,MAAMA,EAASC,IAQNC,OAPS,IAAIC,QAAQ,CAACC,EAASC,KACpCC,WAAW,KACLL,EAAK,GACPG,EAAQH,IAETA,MAKDM,EAAUC,GAASC,QAAQC,sBAAsBF,OAEvDR,EAAM,KACHW,KAAKJ,GACLK,MAAOC,GAAQJ,QAAQC,IAAIG,IAC9Bb,EAAM,KACHW,KAAKJ,GACLK,MAAOC,GAAQJ,QAAQC,IAAIG,IAC9Bb,EAAM,MACHW,KAAKJ,GACLK,MAAOC,GAAQJ,QAAQC,IAAIG,IAC9Bb,EAAM,OAAOW,KAAK,KAChBF,QAAQC,sBAAsBF,YAMhC,MAAMM,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,CAACC,EAAUC,KAY1BjB,OAVW,IAAIC,QAAQ,CAACiB,EAAKC,KAC9Bf,WAAW,KACDgB,MAAAA,EAAeJ,EAASK,IAAIC,GAC9BA,EAAKT,OAASI,EAAW,IAAKK,EAAMR,QAASQ,EAAKR,QAAWQ,GAErEJ,EAAIE,MAIR,IAIEG,EAAWH,GAAiBb,QAAQiB,MAAMJ,GAEhDL,EAAgBH,EAAO,SAASH,KAAKc,GACrCR,EAAgBH,EAAO,OAAOH,KAAKc,GAInC,MAAME,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAmBC,IACjBlC,MAAAA,EAAQ2B,EAA0B,IAAK,KACtC,OAAA,IAAIxB,QAAQ,CAACiB,EAAKC,KACvBf,WAAW,KACUwB,KAAKE,SAAW,GAEjCZ,EAAI,CAAEe,GAAID,EAAYC,GAAI3B,KAAMR,IAEhCqB,EAAI,CAAEc,GAAID,EAAYC,MAEvBnC,MAIDoC,EAAa,EAAED,GAAAA,EAAI3B,KAAAA,MACvBC,QAAQC,mBAAmByB,kBAAmB3B,QAG1C6B,EAAW,EAAEF,GAAAA,MACjB1B,QAAQ6B,qCAAqCH,+BAG/CF,EAAgB,CAAEE,GAAI,GAAII,OAAQ,MAAO5B,KAAKyB,GAAYxB,MAAMyB,GAEhEJ,EAAgB,CAAEE,GAAI,GAAII,OAAQ,MAAO5B,KAAKyB,GAAYxB,MAAMyB,GAEhEJ,EAAgB,CAAEE,GAAI,GAAII,OAAQ,KAAM5B,KAAKyB,GAAYxB,MAAMyB,GAE/DJ,EAAgB,CAAEE,GAAI,GAAII,OAAQ,MAAO5B,KAAKyB,GAAYxB,MAAMyB","file":"src.9c702a18.js","sourceRoot":"../src","sourcesContent":["//task-1\n\nconst delay = (ms) => {\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (ms > 0) {\n        resolve(ms);\n      }\n    }, ms);\n  });\n  return promise;\n};\n\nconst logger = (time) => console.log(`Resolved after ${time}ms`);\n\ndelay(2000)\n  .then(logger)\n  .catch((err) => console.log(err));\ndelay(1000)\n  .then(logger)\n  .catch((err) => console.log(err));\ndelay(1500)\n  .then(logger)\n  .catch((err) => console.log(err));\ndelay(\"ggg\").then(() => {\n  console.log(`Resolved after ${time}ms`);\n});\n  // .catch((err) => console.error(`не передано нужное значение`));\n\n//task2\n\nconst users = [\n  { name: \"Mango\", active: true },\n  { name: \"Poly\", active: false },\n  { name: \"Ajax\", active: true },\n  { name: \"Lux\", active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n\n    const promise = new Promise((res, rej) => {\n        setTimeout(() => {\n            const updatedUsers = allUsers.map(user =>\n                user.name === userName ? { ...user, active: !user.active } : user,\n                );\n        res(updatedUsers);\n\n            // rej();\n    });\n  },0);\n  return promise\n};\n\nconst logger1 = (updatedUsers) => console.table(updatedUsers);\n\ntoggleUserState(users, \"Mango\").then(logger1);\ntoggleUserState(users, \"Lux\").then(logger1);\n\n// //task3\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) => {\n  const delay = randomIntegerFromInterval(200, 500);\n  return new Promise((res, rej) => {\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n      if (canProcess) {\n        res({ id: transaction.id, time: delay });\n      } else {\n        rej({ id: transaction.id });\n      }\n    }, delay);\n  });\n};\n\nconst logSuccess = ({id, time}) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = ({id}) => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\n"]}